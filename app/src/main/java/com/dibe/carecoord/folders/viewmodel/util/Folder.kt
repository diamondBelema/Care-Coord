package com.dibe.carecoord.folders.viewmodel.util
import io.appwrite.models.Document
import java.time.Instant

data class Folder(
        var id: String = "" ,
        var hospitalId: String = "" ,
        val name: String = "" ,
        val age: Int = 0 ,
        val sex: String = "" ,
        val occupation: String = "" ,
        val maritalStatus: String = "" ,
        val address: String = "" ,
        val tribe: String = "" ,
        val height: Float = 0.0f ,
        val weight: Float = 0.0f ,
        val bmi: Float = 0.0f ,
        val pulse: Int = 0 ,
        val oxygenSaturation: Float = 0.0f ,
        val sys: Int = 0 ,
        val dys: Int = 0 ,
        val lmp: String = "" ,
        val edd: String = "" ,
        val gravidity: String = "" ,
        val parity: String = "" ,
        val katamenia: String = "" ,
        val complain: String = "" ,
        val hpc: String = "" ,
        val gynaeHistory: String = "" ,
        val medicalHistory: String = "" ,
        val socialHistory: String = "" ,
        val drugHistory: String = "" ,
        val ros: String = "" ,
        val physicalExamination: String = "" ,
        val diagnosis: String = "" ,
        val investigation: String = "" ,
        val treatment: String = "" ,
        val summary: String = "" ,
        val patientUpdate: String = "" ,
        val timestamp: Long = Instant.now().toEpochMilli(),
        val tests: String = "",
                 ) {
    companion object {
        // Function to convert a Document to a Folder instance
        fun fromDocument(document: Document<Map<String, Any>>): Folder {
            return Folder(
                id = document.id,
                hospitalId = document.data["HospitalId"] as? String ?: "",
                name = document.data["Name"] as? String ?: "",
                age = (document.data["Age"] as? Number)?.toInt() ?: 0,
                sex = document.data["Sex"] as? String ?: "",
                occupation = document.data["Occupation"] as? String ?: "",
                maritalStatus = document.data["MaritalStatus"] as? String ?: "",
                address = document.data["Address"] as? String ?: "",
                tribe = document.data["Tribe"] as? String ?: "",
                height = (document.data["Height"] as? Number)?.toFloat() ?: 0.0f,
                weight = (document.data["Weight"] as? Number)?.toFloat() ?: 0.0f,
                bmi = document.data["Bmi"] as? Float ?: 0.0f,
                pulse = (document.data["Pulse"] as? Number)?.toInt() ?: 0,
                oxygenSaturation = (document.data["OxygenSaturation"] as? Number)?.toFloat() ?: 0.0f,
                sys = document.data["Sys"] as? Int ?: 0,
                dys = document.data["Dys"] as? Int ?: 0,
                lmp = document.data["Lmp"] as? String ?: "",
                edd = document.data["Edd"] as? String ?: "",
                gravidity = document.data["Gravidity"] as? String ?: "",
                parity = document.data["Parity"] as? String ?: "",
                katamenia = document.data["Katamenia"] as? String ?: "",
                complain = document.data["Complain"] as? String ?: "",
                hpc = document.data["Hpc"] as? String ?: "",
                gynaeHistory = document.data["GynaeHistory"] as? String ?: "",
                medicalHistory = document.data["MedicalHistory"] as? String ?: "",
                socialHistory = document.data["SocialHistory"] as? String ?: "",
                drugHistory = document.data["DrugHistory"] as? String ?: "",
                ros = document.data["Ros"] as? String ?: "",
                physicalExamination = document.data["PhysicalExamination"] as? String ?: "",
                diagnosis = document.data["Diagnosis"] as? String ?: "",
                investigation = document.data["Investigation"] as? String ?: "",
                treatment = document.data["Treatment"] as? String ?: "",
                summary = document.data["Summary"] as? String ?: "",
                patientUpdate = document.data["PatientUpdate"] as? String ?: "",
                timestamp = (document.data["TimeStamp"] as? Number)?.toLong() ?: 0L,
                tests = (document.data["Tests"] as? String) ?: ""
                         )
        }
    }

    fun toMap(): Map<String, Any> {
        return mapOf(
            "HospitalID" to hospitalId,
            "Name" to name,
            "Age" to age,
            "Sex" to sex,
            "Occupation" to occupation,
            "MaritalStatus" to maritalStatus,
            "Address" to address,
            "Tribe" to tribe,
            "Height" to height,
            "Weight" to weight,
            "BMI" to bmi,
            "Pulse" to pulse,
            "OxygenSaturation" to oxygenSaturation,
            "Sys" to sys,
            "Dys" to dys,
            "LMP" to lmp,
            "EDD" to edd,
            "Gravidity" to gravidity,
            "Parity" to parity,
            "Katamenia" to katamenia,
            "Complain" to complain,
            "HPC" to hpc,
            "GynaeHistory" to gynaeHistory,
            "MedicalHistory" to medicalHistory,
            "SocialHistory" to socialHistory,
            "DrugHistory" to drugHistory,
            "ROS" to ros,
            "PhysicalExamination" to physicalExamination,
            "Diagnosis" to diagnosis,
            "Investigation" to investigation,
            "Treatment" to treatment,
            "Tests" to tests,
            "Summary" to summary,
            "PatientUpdate" to patientUpdate,
            "TimeStamp" to timestamp
                    )
    }
}
